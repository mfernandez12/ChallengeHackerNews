{"ast":null,"code":"import { TestBed, fakeAsync, tick } from '@angular/core/testing';\nimport { HomeComponent } from './home.component';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { HttpClient } from '@angular/common/http';\nimport { NgxPaginationModule } from 'ngx-pagination';\ndescribe('HomeComponent', () => {\n  let fixture;\n  let component;\n  let httpClient;\n  let httpTestingController;\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule, NgxPaginationModule],\n      declarations: [HomeComponent],\n      providers: [{\n        provide: 'BASE_URL',\n        useValue: 'https://localhost:7139'\n      }]\n    });\n    fixture = TestBed.createComponent(HomeComponent);\n    component = fixture.componentInstance;\n    httpClient = TestBed.inject(HttpClient);\n    httpTestingController = TestBed.inject(HttpTestingController);\n  });\n  afterEach(() => {\n    httpTestingController.verify();\n  });\n  it('should create the component', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should fetch hacker news data and populate pagedItems', fakeAsync(() => {\n    const dummyData = [{\n      title: 'News 1'\n    }, {\n      title: 'News 2'\n    }, {\n      title: 'News 3'\n    }];\n    component.ngOnInit();\n    const req = httpTestingController.expectOne('https://localhost:7139/api/hackernews/new-stories');\n    expect(req.request.method).toBe('GET');\n    req.flush(dummyData);\n    tick();\n    expect(component.hackerNewsData).toEqual(dummyData);\n    expect(component.totalNews).toBe(dummyData.length);\n    expect(component.pagedItems).toEqual(dummyData);\n    expect(component.loading).toBe(false);\n  }));\n  it('should filter hacker news data by title', () => {\n    const dummyData = [{\n      title: 'News 1'\n    }, {\n      title: 'News 2'\n    }, {\n      title: 'News 3'\n    }];\n    component.hackerNewsData = dummyData;\n    component.searchText = 'News 2';\n    component.filterByTitle();\n    expect(component.pagedItems).toEqual([{\n      title: 'News 2'\n    }]);\n  });\n  it('should set the current page and update pagedItems', () => {\n    const dummyData = [{\n      title: 'News 1'\n    }, {\n      title: 'News 2'\n    }, {\n      title: 'News 3'\n    }, {\n      title: 'News 4'\n    }, {\n      title: 'News 5'\n    }];\n    component.hackerNewsData = dummyData;\n    component.totalNews = dummyData.length;\n    component.setPage(2);\n    expect(component.p).toBe(2);\n    expect(component.pagedItems).toEqual([{\n      title: 'News 3'\n    }, {\n      title: 'News 4'\n    }]);\n  });\n  it('should not set the current page if it is out of bounds', () => {\n    const dummyData = [{\n      title: 'News 1'\n    }, {\n      title: 'News 2'\n    }];\n    component.hackerNewsData = dummyData;\n    component.totalNews = dummyData.length;\n    component.setPage(-1);\n    expect(component.p).toBe(1);\n    component.setPage(5);\n    expect(component.p).toBe(1);\n  });\n  it('should calculate total pages correctly', () => {\n    const dummyData = [{\n      title: 'News 1'\n    }, {\n      title: 'News 2'\n    }, {\n      title: 'News 3'\n    }];\n    component.hackerNewsData = dummyData;\n    component.itemsPerPage = 2;\n    const totalPages = component.totalPages;\n    expect(totalPages).toBe(2);\n  });\n});","map":{"version":3,"mappings":"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","names":["TestBed","fakeAsync","tick","HomeComponent","HttpClientTestingModule","HttpTestingController","HttpClient","NgxPaginationModule","describe","fixture","component","httpClient","httpTestingController","beforeEach","configureTestingModule","imports","declarations","providers","provide","useValue","createComponent","componentInstance","inject","afterEach","verify","it","expect","toBeTruthy","dummyData","title","ngOnInit","req","expectOne","request","method","toBe","flush","hackerNewsData","toEqual","totalNews","length","pagedItems","loading","searchText","filterByTitle","setPage","p","itemsPerPage","totalPages"],"sourceRoot":"","sources":["C:\\Users\\mafernandez\\OneDrive - ENDAVA\\Documents\\ChallengeHackerNews\\ClientApp\\src\\app\\home\\home.component.spec.ts"],"sourcesContent":["import { TestBed, ComponentFixture, fakeAsync, tick } from '@angular/core/testing';\r\nimport { HomeComponent } from './home.component';\r\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { NgxPaginationModule } from 'ngx-pagination';\r\n\r\ndescribe('HomeComponent', () => {\r\n  let fixture: ComponentFixture<HomeComponent>;\r\n  let component: HomeComponent;\r\n  let httpClient: HttpClient;\r\n  let httpTestingController: HttpTestingController;\r\n\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [HttpClientTestingModule, NgxPaginationModule],\r\n      declarations: [HomeComponent],\r\n      providers: [\r\n        { provide: 'BASE_URL', useValue: 'https://localhost:7139' },\r\n      ],\r\n    });\r\n\r\n    fixture = TestBed.createComponent(HomeComponent);\r\n    component = fixture.componentInstance;\r\n    httpClient = TestBed.inject(HttpClient);\r\n    httpTestingController = TestBed.inject(HttpTestingController);\r\n  });\r\n\r\n  afterEach(() => {\r\n    httpTestingController.verify();\r\n  });\r\n\r\n  it('should create the component', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('should fetch hacker news data and populate pagedItems', fakeAsync(() => {\r\n    const dummyData = [{ title: 'News 1' }, { title: 'News 2' }, { title: 'News 3' }];\r\n    component.ngOnInit();\r\n\r\n    const req = httpTestingController.expectOne('https://localhost:7139/api/hackernews/new-stories');\r\n    expect(req.request.method).toBe('GET');\r\n    req.flush(dummyData);\r\n\r\n    tick();\r\n\r\n    expect(component.hackerNewsData).toEqual(dummyData);\r\n    expect(component.totalNews).toBe(dummyData.length);\r\n    expect(component.pagedItems).toEqual(dummyData);\r\n    expect(component.loading).toBe(false);\r\n  }));\r\n\r\n  it('should filter hacker news data by title', () => {\r\n    const dummyData = [\r\n      { title: 'News 1' },\r\n      { title: 'News 2' },\r\n      { title: 'News 3' },\r\n    ];\r\n    component.hackerNewsData = dummyData;\r\n    component.searchText = 'News 2';\r\n\r\n    component.filterByTitle();\r\n\r\n    expect(component.pagedItems).toEqual([{ title: 'News 2' }]);\r\n  });\r\n\r\n  it('should set the current page and update pagedItems', () => {\r\n    const dummyData = [\r\n      { title: 'News 1' },\r\n      { title: 'News 2' },\r\n      { title: 'News 3' },\r\n      { title: 'News 4' },\r\n      { title: 'News 5' },\r\n    ];\r\n    component.hackerNewsData = dummyData;\r\n    component.totalNews = dummyData.length;\r\n\r\n    component.setPage(2);\r\n\r\n    expect(component.p).toBe(2);\r\n    expect(component.pagedItems).toEqual([{ title: 'News 3' }, { title: 'News 4' }]);\r\n  });\r\n\r\n  it('should not set the current page if it is out of bounds', () => {\r\n    const dummyData = [\r\n      { title: 'News 1' },\r\n      { title: 'News 2' },\r\n    ];\r\n    component.hackerNewsData = dummyData;\r\n    component.totalNews = dummyData.length;\r\n\r\n    component.setPage(-1);\r\n\r\n    expect(component.p).toBe(1);\r\n\r\n    component.setPage(5);\r\n\r\n    expect(component.p).toBe(1);\r\n  });\r\n\r\n  it('should calculate total pages correctly', () => {\r\n    const dummyData = [\r\n      { title: 'News 1' },\r\n      { title: 'News 2' },\r\n      { title: 'News 3' },\r\n    ];\r\n    component.hackerNewsData = dummyData;\r\n    component.itemsPerPage = 2;\r\n\r\n    const totalPages = component.totalPages;\r\n\r\n    expect(totalPages).toBe(2);\r\n  });\r\n});\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
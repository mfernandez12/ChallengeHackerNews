{"ast":null,"code":"import { TestBed } from '@angular/core/testing';\nimport { HomeComponent } from './home.component';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { FormsModule } from '@angular/forms';\nimport { NgxPaginationModule } from 'ngx-pagination';\ndescribe('HomeComponent', () => {\n  process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';\n  let component;\n  let fixture;\n  let httpTestingController;\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      declarations: [HomeComponent],\n      imports: [HttpClientTestingModule, FormsModule, NgxPaginationModule]\n    });\n    fixture = TestBed.createComponent(HomeComponent);\n    component = fixture.componentInstance;\n    httpTestingController = TestBed.inject(HttpTestingController);\n  });\n  afterEach(() => {\n    httpTestingController.verify();\n  });\n  it('should create the app', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should initialize loading as true', () => {\n    expect(component.loading).toBeTruthy();\n  });\n  it('should fetch hacker news data on ngOnInit', () => {\n    const dummyData = [{}];\n    component.ngOnInit();\n    const req = httpTestingController.expectOne('https://localhost:7139/api/hackernews/new-stories');\n    expect(req.request.method).toBe('GET');\n    req.flush(dummyData);\n    expect(component.hackerNewsData).toEqual(dummyData);\n    expect(component.totalNews).toBe(dummyData.length);\n    expect(component.pagedItems).toEqual(dummyData);\n    expect(component.loading).toBeFalsy();\n  });\n  it('should filter hacker news data by title', () => {\n    component.hackerNewsData = [{\n      title: 'Title 1'\n    }, {\n      title: 'Title 2'\n    }, {\n      title: 'Title 3'\n    }];\n    component.searchText = 'Title 1';\n    component.filterByTitle();\n    expect(component.pagedItems.length).toBe(1);\n    expect(component.pagedItems[0].title).toBe('Title 1');\n  });\n  it('should set the page correctly', () => {\n    const dummyData = [{\n      title: 'Title 1'\n    }, {\n      title: 'Title 2'\n    }, {\n      title: 'Title 3'\n    }, {\n      title: 'Title 4'\n    }, {\n      title: 'Title 5'\n    }];\n    component.hackerNewsData = dummyData;\n    component.itemsPerPage = 2;\n    component.setPage(2);\n    expect(component.pagedItems.length).toBe(2);\n    expect(component.pagedItems[0].title).toBe('Title 3');\n    expect(component.pagedItems[1].title).toBe('Title 4');\n    expect(component.p).toBe(2);\n  });\n  it('should calculate total pages correctly', () => {\n    component.hackerNewsData = [{\n      title: 'Title 1'\n    }, {\n      title: 'Title 2'\n    }, {\n      title: 'Title 3'\n    }, {\n      title: 'Title 4'\n    }];\n    component.itemsPerPage = 2;\n    const totalPages = component.totalPages;\n    expect(totalPages).toBe(2);\n  });\n});","map":{"version":3,"mappings":"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","names":["TestBed","HomeComponent","HttpClientTestingModule","HttpTestingController","FormsModule","NgxPaginationModule","describe","process","env","NODE_TLS_REJECT_UNAUTHORIZED","component","fixture","httpTestingController","beforeEach","configureTestingModule","declarations","imports","createComponent","componentInstance","inject","afterEach","verify","it","expect","toBeTruthy","loading","dummyData","ngOnInit","req","expectOne","request","method","toBe","flush","hackerNewsData","toEqual","totalNews","length","pagedItems","toBeFalsy","title","searchText","filterByTitle","itemsPerPage","setPage","p","totalPages"],"sourceRoot":"","sources":["C:\\Users\\mafernandez\\OneDrive - ENDAVA\\Documents\\ChallengeHackerNews\\ClientApp\\src\\app\\home\\home.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { HomeComponent } from './home.component';\r\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NgxPaginationModule } from 'ngx-pagination';\r\n\r\ndescribe('HomeComponent', () => {\r\n  process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';\r\n  let component: HomeComponent;\r\n  let fixture: ComponentFixture<HomeComponent>;\r\n  let httpTestingController: HttpTestingController;\r\n\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({\r\n      declarations: [HomeComponent],\r\n      imports: [HttpClientTestingModule, FormsModule, NgxPaginationModule]\r\n    });\r\n\r\n    fixture = TestBed.createComponent(HomeComponent);\r\n    component = fixture.componentInstance;\r\n    httpTestingController = TestBed.inject(HttpTestingController);\r\n  });\r\n\r\n  afterEach(() => {\r\n    httpTestingController.verify();\r\n  });\r\n\r\n  it('should create the app', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('should initialize loading as true', () => {\r\n    expect(component.loading).toBeTruthy();\r\n  });\r\n\r\n  it('should fetch hacker news data on ngOnInit', () => {\r\n    const dummyData = [{}];\r\n\r\n    component.ngOnInit();\r\n\r\n    const req = httpTestingController.expectOne('https://localhost:7139/api/hackernews/new-stories');\r\n    expect(req.request.method).toBe('GET');\r\n\r\n    req.flush(dummyData);\r\n\r\n    expect(component.hackerNewsData).toEqual(dummyData);\r\n    expect(component.totalNews).toBe(dummyData.length);\r\n    expect(component.pagedItems).toEqual(dummyData);\r\n    expect(component.loading).toBeFalsy();\r\n  });\r\n\r\n  it('should filter hacker news data by title', () => {\r\n    component.hackerNewsData = [\r\n      { title: 'Title 1' },\r\n      { title: 'Title 2' },\r\n      { title: 'Title 3' }\r\n    ];\r\n    component.searchText = 'Title 1';\r\n\r\n    component.filterByTitle();\r\n\r\n    expect(component.pagedItems.length).toBe(1);\r\n    expect(component.pagedItems[0].title).toBe('Title 1');\r\n  });\r\n\r\n  it('should set the page correctly', () => {\r\n    const dummyData = [\r\n      { title: 'Title 1' },\r\n      { title: 'Title 2' },\r\n      { title: 'Title 3' },\r\n      { title: 'Title 4' },\r\n      { title: 'Title 5' }\r\n    ];\r\n\r\n    component.hackerNewsData = dummyData;\r\n    component.itemsPerPage = 2;\r\n\r\n    component.setPage(2);\r\n\r\n    expect(component.pagedItems.length).toBe(2);\r\n    expect(component.pagedItems[0].title).toBe('Title 3');\r\n    expect(component.pagedItems[1].title).toBe('Title 4');\r\n    expect(component.p).toBe(2);\r\n  });\r\n\r\n  it('should calculate total pages correctly', () => {\r\n    component.hackerNewsData = [\r\n      { title: 'Title 1' },\r\n      { title: 'Title 2' },\r\n      { title: 'Title 3' },\r\n      { title: 'Title 4' }\r\n    ];\r\n    component.itemsPerPage = 2;\r\n\r\n    const totalPages = component.totalPages;\r\n\r\n    expect(totalPages).toBe(2);\r\n  });\r\n});\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}